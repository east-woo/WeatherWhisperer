buildscript {
	ext {
		springBootVersion = '3.2.1'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
		classpath "io.spring.gradle:dependency-management-plugin:1.0.11.RELEASE"
	}
}

// 하위 모든 프로젝트 공통 세팅
subprojects {
	apply plugin: 'java'
	apply plugin: 'idea'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'

	group 'org.eastwoo'
	version '1.0-SNAPSHOT'

	sourceCompatibility = '17'
	targetCompatibility = '17'
	compileJava.options.encoding = 'UTF-8'

	repositories {
		mavenCentral()
	}

	// 하위 모듈에서 공통으로 사용하는 세팅 추가
	dependencies {
		compileOnly 'org.projectlombok:lombok'

		annotationProcessor 'org.projectlombok:lombok'
		annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

		testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
		testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'

	}

	test {
		useJUnitPlatform()
	}
}

project(':weather-common') {
	// 공통 코드

	bootJar { enabled = false } // core 은 bootJar 로 패키징 할 필요 없음
	jar { enabled = true }

	/*
	task copyPem(type: Copy) {
		copy {
			from '../WeatherWhisperer_private/pem'
			include "*.pem"
			into 'src/main/resources/ssh'
		}
	}
	*/

	task copyPrivate(type: Copy) {
		copy {
			from '../WeatherWhisperer_private/profiles'
			include "*.yml"
			into 'src/main/resources'
		}
	}



	dependencies {
		implementation 'org.springframework.boot:spring-boot-starter-web'
		implementation 'com.github.mwiede:jsch:0.2.16'
	}
}

project(':weather-api') {
	bootJar { enabled = true }
	jar { enabled = false }

	dependencies {
		implementation project(':weather-common') // 컴파일 시 velog-core project 로딩
		implementation 'org.springframework.boot:spring-boot-starter-web'
		implementation 'org.springframework.boot:spring-boot-devtools'
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
		implementation 'org.springframework.boot:spring-boot-starter-security'
		implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
		implementation 'org.springframework.boot:spring-boot-starter-validation'
		implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'

		implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
		implementation 'org.springframework.boot:spring-boot-starter-jdbc'
		//implementation 'org.springframework.session:spring-session-jdbc'

		/* 로컬 개발용 db ssh tunneling */
		// https://mavenlibs.com/maven/dependency/com.jcraft/jsch
		//implementation 'com.jcraft:jsch:0.1.55'

		// SSH 통신
		implementation 'com.github.mwiede:jsch:0.2.16'

		// postgreSQL
		implementation 'org.postgresql:postgresql:42.6.0'

		// log4jdbc-log4j2
		implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'

		compileOnly 'org.projectlombok:lombok'
		annotationProcessor 'org.projectlombok:lombok'

		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		testImplementation 'org.springframework.security:spring-security-test'

		/*swagger*/
		implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

		/*Query DSL*/
		/*Query DSL(spring booy 3.x 이상)*/
		implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
		annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
		annotationProcessor "jakarta.annotation:jakarta.annotation-api"
		annotationProcessor "jakarta.persistence:jakarta.persistence-api"

		implementation 'org.springframework.boot:spring-boot-starter-webflux'
	}


	def querydslDir = "$buildDir/generated/querydsl"

	sourceSets {
		main.java.srcDirs += [ querydslDir ]
	}

	tasks.withType(JavaCompile) {
		options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
	}

	clean.doLast {
		file(querydslDir).deleteDir()
	}
}

project(':weather-batch') {
	bootJar { enabled = true }
	jar { enabled = false }

	dependencies {
		implementation project(':weather-common') // 컴파일 시 velog-core project 로딩
	}
}

/*
task copyPrivate(type: Copy) {
	copy {
		from './weather-common/WeatherWhisperer_private/profiles'
		include "*.yml"
		into '/weather-api/src/main/resources'
	}
}

*/

